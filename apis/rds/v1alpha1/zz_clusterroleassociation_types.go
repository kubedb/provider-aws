/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterRoleAssociationObservation struct {

	// DB Cluster Identifier to associate with the IAM Role.
	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty" tf:"db_cluster_identifier,omitempty"`

	// Name of the feature for association. This can be found in the AWS documentation relevant to the integration or a full list is available in the SupportedFeatureNames list returned by AWS CLI rds describe-db-engine-versions.
	FeatureName *string `json:"featureName,omitempty" tf:"feature_name,omitempty"`

	// DB Cluster Identifier and IAM Role ARN separated by a comma (,)
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Amazon Resource Name (ARN) of the IAM Role to associate with the DB Cluster.
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`
}

type ClusterRoleAssociationParameters struct {

	// DB Cluster Identifier to associate with the IAM Role.
	// +kubebuilder:validation:Optional
	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty" tf:"db_cluster_identifier,omitempty"`

	// Name of the feature for association. This can be found in the AWS documentation relevant to the integration or a full list is available in the SupportedFeatureNames list returned by AWS CLI rds describe-db-engine-versions.
	// +kubebuilder:validation:Optional
	FeatureName *string `json:"featureName,omitempty" tf:"feature_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Amazon Resource Name (ARN) of the IAM Role to associate with the DB Cluster.
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`
}

// ClusterRoleAssociationSpec defines the desired state of ClusterRoleAssociation
type ClusterRoleAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterRoleAssociationParameters `json:"forProvider"`
}

// ClusterRoleAssociationStatus defines the observed state of ClusterRoleAssociation.
type ClusterRoleAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterRoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterRoleAssociation is the Schema for the ClusterRoleAssociations API. Manages a RDS DB Cluster association with an IAM Role.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ClusterRoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dbClusterIdentifier)",message="dbClusterIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.featureName)",message="featureName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.region)",message="region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleArn)",message="roleArn is a required parameter"
	Spec   ClusterRoleAssociationSpec   `json:"spec"`
	Status ClusterRoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterRoleAssociationList contains a list of ClusterRoleAssociations
type ClusterRoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterRoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	ClusterRoleAssociation_Kind             = "ClusterRoleAssociation"
	ClusterRoleAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterRoleAssociation_Kind}.String()
	ClusterRoleAssociation_KindAPIVersion   = ClusterRoleAssociation_Kind + "." + CRDGroupVersion.String()
	ClusterRoleAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ClusterRoleAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterRoleAssociation{}, &ClusterRoleAssociationList{})
}
