// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

// Package apis contains Kubernetes API for the provider.
package apis

import (
	"k8s.io/apimachinery/pkg/runtime"

	v1alpha1 "kubedb.dev/provider-aws/apis/docdb/v1alpha1"
	v1alpha1dynamodb "kubedb.dev/provider-aws/apis/dynamodb/v1alpha1"
	v1alpha1ec2 "kubedb.dev/provider-aws/apis/ec2/v1alpha1"
	v1alpha1elasticache "kubedb.dev/provider-aws/apis/elasticache/v1alpha1"
	v1alpha1elasticsearch "kubedb.dev/provider-aws/apis/elasticsearch/v1alpha1"
	v1alpha1iam "kubedb.dev/provider-aws/apis/iam/v1alpha1"
	v1alpha1kafka "kubedb.dev/provider-aws/apis/kafka/v1alpha1"
	v1alpha1kinesis "kubedb.dev/provider-aws/apis/kinesis/v1alpha1"
	v1alpha1kms "kubedb.dev/provider-aws/apis/kms/v1alpha1"
	v1alpha1memorydb "kubedb.dev/provider-aws/apis/memorydb/v1alpha1"
	v1alpha1rds "kubedb.dev/provider-aws/apis/rds/v1alpha1"
	v1alpha1secretsmanager "kubedb.dev/provider-aws/apis/secretsmanager/v1alpha1"
	v1alpha1sns "kubedb.dev/provider-aws/apis/sns/v1alpha1"
	v1alpha1apis "kubedb.dev/provider-aws/apis/v1alpha1"
	v1beta1 "kubedb.dev/provider-aws/apis/v1beta1"
)

func init() {
	// Register the types with the Scheme so the components can map objects to GroupVersionKinds and back
	AddToSchemes = append(AddToSchemes,
		v1alpha1.SchemeBuilder.AddToScheme,
		v1alpha1dynamodb.SchemeBuilder.AddToScheme,
		v1alpha1ec2.SchemeBuilder.AddToScheme,
		v1alpha1elasticache.SchemeBuilder.AddToScheme,
		v1alpha1elasticsearch.SchemeBuilder.AddToScheme,
		v1alpha1iam.SchemeBuilder.AddToScheme,
		v1alpha1kafka.SchemeBuilder.AddToScheme,
		v1alpha1kinesis.SchemeBuilder.AddToScheme,
		v1alpha1kms.SchemeBuilder.AddToScheme,
		v1alpha1memorydb.SchemeBuilder.AddToScheme,
		v1alpha1rds.SchemeBuilder.AddToScheme,
		v1alpha1secretsmanager.SchemeBuilder.AddToScheme,
		v1alpha1sns.SchemeBuilder.AddToScheme,
		v1alpha1apis.SchemeBuilder.AddToScheme,
		v1beta1.SchemeBuilder.AddToScheme,
	)
}

// AddToSchemes may be used to add all resources defined in the project to a Scheme
var AddToSchemes runtime.SchemeBuilder

// AddToScheme adds all Resources to the Scheme
func AddToScheme(s *runtime.Scheme) error {
	return AddToSchemes.AddToScheme(s)
}
